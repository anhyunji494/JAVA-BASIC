package model;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

//   DAO : Data Access Object
//   Member table 과 data를 주고 받는 기능들을 모아둔 클래스
public class MemberDAO {
   Connection conn = null;
   PreparedStatement psmt = null;
   ResultSet rs = null;

//   1.회원가입 기능
   public int join(MemberDTO dto) {
      String id = dto.getId();
      String pw = dto.getPw();
      String name = dto.getName();
      int age = dto.getAge();
      int cnt = 0;
//       JDBC를 활용한 회원등록
//       프로젝트안에 드라이브 파일 넣어주기(동적로링)
//       컴파일러가 아래 코드를 보고 해당 드라이버를 찾아가서 적용하기 때문
      try {
         connection();
//      SQL문장 실행
//       - PreparedStatement
         String sql = "INSERT INTO MEMBER VALUES(?,?,?,?)";
         psmt = conn.prepareStatement(sql);
         psmt.setString(1, id);
         psmt.setString(2, pw);
         psmt.setString(3, name);
         psmt.setInt(4, age);
//      executeUpdate()는 실행한 문장의 개수를 반환
         cnt = psmt.executeUpdate();
      } catch (SQLException e) {
         e.printStackTrace();
      } finally {
         close();
      }
      return cnt;
   }

//   2. 로그인 기능
   public MemberDTO login(String id, String pw) {
      
      MemberDTO info = null;
      
      try {
//      DB연동해주는 메소드
         connection();
         String sql = "SELECT * FROM MEMBER WHERE ID = ? AND PW = ?";
         psmt = conn.prepareStatement(sql);
         psmt.setString(1, id);
         psmt.setString(2, pw);
//         CRUD : create(생성), read(읽기, 조회), update(수정, 갱신), delete(삭제)
//         executeUpdate() : 삽입(insert), 수정(update), 삭제(delete)
//         -> 실행에 성공했을 때 수행된 row 수를 반환(int)
//         executeQuery() : 조회(select) 
//         -> ResultSet : 커서 객체
         rs = psmt.executeQuery();
         if (rs.next()) {
            String login_id = rs.getString(1);
            String login_pw = rs.getString(2);
            String login_name = rs.getString(3);
            int login_age = rs.getInt(4);
            info = new MemberDTO(login_id, login_pw, login_name, login_age);
         }
      } catch (Exception e) {
         e.printStackTrace();
      } finally {
         close();
      }
      
      return info;
      
      
      
   }

//   3. 회원 목록 기능
   public ArrayList<MemberDTO> memberList() {
      
//      회원들의 목록을 저장할 ArrayList생성
      ArrayList<MemberDTO> list = new ArrayList<MemberDTO>();
      
      
      try {
         connection();
         String sql = "SELECT * FROM MEMBER";
         psmt = conn.prepareStatement(sql);
         rs = psmt.executeQuery();
         while (rs.next()) {
            String id = rs.getString(1);
            String pw = rs.getString(2);
            String name = rs.getString(3);
            int age = rs.getInt(4);
            MemberDTO dto = new MemberDTO(id, pw, name, age);
            list.add(dto);
         }
      } catch (Exception e) {
         e.printStackTrace();
      } finally {
         close();
      }
   }

//   4. 회원 탈퇴 기능
   public void delete(String id) {
      try {
         connection();
         String sql = "DELETE FROM MEMBER WHERE ID = ?";
         psmt = conn.prepareStatement(sql);
         psmt.setString(1, id);
         int cnt = psmt.executeUpdate();
         if (cnt > 0) {
            System.out.println("회원탈퇴 성공");
         } else {
            System.out.println("회원탈퇴 실패");
         }
      } catch (Exception e) {
         e.printStackTrace();
      } finally {
         close();
      }
   }

//    5. 회원 정보 수정 기능
   public void update(MemberDTO dto) {
      try {
          connection();
         String sql = "UPDATE MEMBER SET PW = ?, NAME = ?, AGE = ? WHERE ID = ?";
         psmt = conn.prepareStatement(sql);
         psmt.setString(1, dto.getPw());
         psmt.setString(2, dto.getName());
         psmt.setInt(3, dto.getAge());
         psmt.setString(4, dto.getId());
         
         int cnt = psmt.executeUpdate();
         
         if (cnt > 0) {
            System.out.println("회원정보 수정 성공");
         } else {
            System.out.println("회원정보 수정 실패");
         }
      } catch (Exception e) {
         e.printStackTrace();
      } finally {
         close();
      }
   }

   private void close() {
//      catch넘어가거나 아니면 try가 잘 실행되도
//      무조건 마지막에 실행되는 부분
      try {
         if (rs != null) {
            rs.close();
         }

         if (psmt != null) {
            psmt.close();
         }
         if (conn != null) {
            conn.close();
         }
      } catch (SQLException e) {
         e.printStackTrace();
      }
   }

   private void connection() {
      // 에러가 나는 이유
      // - 해당위치에 드라이버 파일이 없을 수도 있고
      // - 잘못 된 결로를 입력했을 때
      try {
         Class.forName("oracle.jdbc.driver.OracleDriver");
         // 2.Connection 연결
         // 연결하기위해서는 3개의 정보필요(주소, 계정, 비밀번호)
         String db_url = "jdbc:oracle:thin:@localhost:1521:xe";
         String db_id = "hr";
         String db_pw = "hr";
         try {
            conn = DriverManager.getConnection(db_url, db_id, db_pw);
         } catch (SQLException e) {
            e.printStackTrace();
         }

         if (conn != null) {
            System.out.println("Connection 연결 성공");
         } else {
            System.out.println("Connection 연결 실패");
         }
      } catch (ClassNotFoundException e) {
         e.printStackTrace();
      }

   }

}